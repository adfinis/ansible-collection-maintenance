---

- name: This task only serves as a template for the tasks below
  ansible.builtin.set_fact:
    ignoreme: &task
      name: "{{ vars.taskid }}: {{ vars.name }}"
      register: task
      when:
        - "vars.taskid not in maintenance_exclude_tasks"
        - "maintenance_only is not defined or maintenance_only == vars.taskid"
  vars:
    taskid: ignore-me
    name: bar

- name: Include OS-specific vars
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_facts.distribution }}{{ ansible_facts.distribution_major_version }}.yml"
    - "{{ ansible_facts.os_family }}{{ ansible_facts.distribution_major_version }}.yml"
    - "{{ ansible_facts.distribution }}.yml"
    - "{{ ansible_facts.os_family }}.yml"

- name: Gather local user accounts
  ansible.builtin.getent:
    database: passwd
    service: files

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto
    strategy: all

- <<: *task
  vars:
    taskid: 10-028
    name: "Systemd: Check all important service units | Gather systemd unit facts"
  ansible.builtin.service_facts: {}

- <<: *task
  vars:
    taskid: 10-028
    name: "Systemd: Check all important service units | Check for failed units"
    failed_units: "{{ ansible_facts.services.items() | map(attribute=1) | selectattr('state', '==', 'failed') | map(attribute='name') | list }}"
  ansible.builtin.debug:
    var: failed_units
  changed_when: "failed_units | length > 0"

- <<: *task
  vars:
    taskid: 10-032
    name: "Disk: Fstab: fstab correct? | Run findmnt --verify --verbose"
  environment:
    LC_ALL: C
  ansible.builtin.command: "findmnt --verify --verbose"
  register: linux_mount_all
  changed_when: false
  check_mode: false
  failed_when: "linux_mount_all.rc not in [0, 1]"

- <<: *task
  vars:
    taskid: 10-032
    name: "Disk: Fstab: fstab correct? | Report findmnt results"
  ansible.builtin.debug:
    var: "linux_mount_all.stdout_lines"
  changed_when: "'Success, no errors or warnings detected' not in linux_mount_all.stdout_lines"

- <<: *task
  vars:
    taskid: 10-034
    name: "Disk: logrotate: Are there files in /var/log that are not rotated? | Find large files in /var/log"
  ansible.builtin.find:
    paths:
      - /var/log
    size: "{{ linux_allowed_large_logfiles_maxsize_mb }}m"
    follow: true
  register: linux_large_logfiles
  changed_when: false

  # Some of the files produced by the task above are sparse files, most notably /var/log/lastlog
  # Use stat to figure out the actual on-disk size
- <<: *task
  vars:
    taskid: 10-034
    name: "Disk: logrotate: Are there files in /var/log that are not rotated? | Stat found files in /var/log"
  ansible.builtin.stat:
    path: "{{ item }}"
    get_attributes: false
    get_checksum: false
    get_mime: false
  loop: "{{ linux_large_logfiles.files | map(attribute='path') | list }}"
  register: linux_large_logfiles_stat
  changed_when: false

- <<: *task
  vars:
    taskid: 10-034
    name: "Disk: logrotate: Are there files in /var/log that are not rotated? | Report large files in /var/log"
    # assuming 4k logical blocksize, which is to be expected nowadays
    large_files: "{{ linux_large_logfiles_stat.results | map(attribute='stat') | selectattr('blocks', 'gt', (linux_allowed_large_logfiles_maxsize_mb * 1024 / 4 | int)) | map(attribute='path') | list }}"
  ansible.builtin.debug:
    var: "large_files"
  changed_when: "large_files | length > 0"

- <<: *task
  vars:
    taskid: 10-035
    name: "Are there logfiles outside /var/log that are not rotated? | Find large files outside /var/log"
  adfinis.maintenance.find:
    paths: "{{ ansible_facts.mounts | map(attribute='mount') | list }}"
    prune: "{{ linux_large_logfiles_prune + linux_additional_large_logfiles_prune }}"
    xdev: true
    type: file
    size: "+16M"
    age: "-{{ 60 * 24 * 7 * 2 }}"  # two weeks
    exclude: "{{ linux_allowed_large_files + linux_additional_allowed_large_files + linux_allow_var_log }}"

- <<: *task
  vars:
    taskid: 10-037
    name: "Logrotate: Are there large files that point to a too verbose service?"
  ansible.builtin.slurp:
    src: "{{ linux_logrotate_status_file }}"
  register: logrotate_output

- <<: *task
  vars:
    taskid: 10-037
    name: "Logrotate: Are there large files that point to a too verbose service?"
  ansible.builtin.set_fact:
    logrotate_logs: "{{ logrotate_output.content | b64decode | split('\n') | map('split',' ') | map('first') |map('trim', '\"') | list }}"

- <<: *task
  vars:
    taskid: 10-037
    name: "Logrotate: Are there large files that point to a too verbose service?"
  adfinis.maintenance.find:
    paths: /var/log
    xdev: true
    type: file
    pattern: "*.log"
    exclude: "{{ linux_allowed_large_files + linux_additional_allowed_large_files }}"
  register: all_logs
  changed_when: false

- <<: *task
  vars:
    taskid: 10-037
    name: "Logrotate: Are there large files that point to a too verbose service?"
  ansible.builtin.set_fact:
    unmanaged_logs: "{{ all_logs.found | reject('in', logrotate_logs) | list }}"

- <<: *task
  vars:
    taskid: 10-037
    name: "Logrotate: Are there large files that point to a too verbose service?"
  ansible.builtin.debug:
    msg: "List of logs not managed by logrotate: \n{% for item in unmanaged_logs %}{{ item + '\n'}}{% endfor %}"
  when:
    - "vars.taskid not in maintenance_exclude_tasks"
    - "maintenance_only is not defined or maintenance_only == vars.taskid"
    - "unmanaged_logs | length > 0"
  changed_when: "unmanaged_logs | length > 0"

- <<: *task
  vars:
    taskid: 10-039
    name: "Logfiles: Does journald log to persistent storage? | Check age of system journal"
  ansible.builtin.stat:
    path: "/var/log/journal/{{ ansible_facts.machine_id }}/system.journal"
  register: linux_stat_system_journal
  check_mode: true

- <<: *task
  vars:
    taskid: 10-039
    name: "Logfiles: Does journald log to persistent storage? | Report age of system journal"
  ansible.builtin.debug:
    msg: >-
      /var/log/journal/{{ ansible_facts.machine_id }}/system.journal
      {% if not linux_stat_system_journal.stat.exists -%}
      does not exist
      {% else -%}
      was last modified {{ '%Y-%m-%d %H:%M:%S' | strftime(linux_stat_system_journal.stat.mtime) }}
      {% endif %}
  changed_when: "not linux_stat_system_journal.stat.exists or (ansible_facts.date_time.epoch | int - linux_stat_system_journal.stat.mtime) > 3600 * 48"

- <<: *task
  vars:
    taskid: 10-040
    name: "Security: User: Are all created users documented in the wiki with password? | Gather local users with password login"
  ansible.builtin.shell: |
    set -o pipefail  # need the return code of grep, not of cut
    grep '\\$' /etc/shadow | cut -d: -f1
  args:
    executable: /bin/bash  # -o pipefail is a bash feature
  changed_when: false
  register: linux_shadow_users
  failed_when: "linux_shadow_users.rc not in [0, 1]"

- <<: *task
  vars:
    taskid: 10-040
    name: "Security: User: Are all created users documented in the wiki with password? | Report local users with password login"
  ansible.builtin.debug:
    var: "linux_shadow_users.stdout_lines | difference(linux_allowed_login_users)"
  changed_when: "linux_shadow_users.stdout_lines | difference(linux_allowed_login_users) | length > 0"

- <<: *task
  vars:
    taskid: 10-041
    name: "Security: Logins: Are there logins from suspicious hosts/users? | Gather past logins from `last` output"
  adfinis.maintenance.lastlogins:
    allowed_users: "{{ linux_allowed_login_users + linux_additional_allowed_login_users }}"
    allowed_ips: "{{ linux_allowed_login_ips + linux_additional_allowed_login_ips }}"
    since: "{{ linux_allowed_login_since | default(omit) }}"

- <<: *task
  vars:
    taskid: 10-042
    name: "Security: SSH keys: Check for unknown or outdated keys for root and all users"
  adfinis.maintenance.audit_ssh_authorizedkeys:
    allowed: "{{ linux_allowed_ssh_authorized_keys + linux_additional_ssh_authorized_keys }}"
    limit_nss_backends: "{{ linux_allowed_ssh_nss_backends }}"
    ignore_nss_backends: "{{ linux_allowed_ssh_ignored_nss_backends }}"
  check_mode: true

- <<: *task
  vars:
    taskid: 10-050
    name: "Mail: serverlogs: Is serverlogs@ entered in /etc/aliases for root?"
  ansible.builtin.lineinfile:
    path: /etc/aliases
    regexp: "^root:"
    line: "root: {{ linux_serverlogs_root_alias }}"
    insertbefore: EOF
  when:
    - "vars.taskid not in maintenance_exclude_tasks"
    - "maintenance_only is not defined or maintenance_only == vars.taskid"
    - "'postfix' in ansible_facts.packages"
  check_mode: true

- <<: *task
  vars:
    taskid: 10-051
    name: "Mail: aliases.db: Make sure /etc/aliases.db is up to date"
  ansible.builtin.shell: "[ -f /etc/aliases ] && postalias /etc/aliases || exit 2"
  when:
    - "vars.taskid not in maintenance_exclude_tasks"
    - "maintenance_only is not defined or maintenance_only == vars.taskid"
    - "'postfix' in ansible_facts.packages"
  changed_when: "task.rc == 2"  # rc == 2 => file doesn't exist
  failed_when: "task.rc == 1"  # rc == 1 => postalias failed
